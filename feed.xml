<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-24T11:35:56+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Soner</title><subtitle>Simplicity is the ultimate sophistication</subtitle><entry><title type="html">The Custom Specifiers in C#</title><link href="http://localhost:4000/csharp/the-custom-specifiers.html" rel="alternate" type="text/html" title="The Custom Specifiers in C# " /><published>2019-11-23T21:34:34+03:00</published><updated>2019-11-23T21:34:34+03:00</updated><id>http://localhost:4000/csharp/the-custom-specifiers</id><content type="html" xml:base="http://localhost:4000/csharp/the-custom-specifiers.html">&lt;h1 id=&quot;the-custom-specifiers&quot;&gt;The Custom Specifiers&lt;/h1&gt;

&lt;p&gt;I had difficulty in grasping the format specifiers while studying. I couldn’t find educational explanatory web pages on which I can grasp perspicuously then I made a decision to write some notes. I assume your &lt;a href=&quot;https://rextester.com/HVGS41537&quot;&gt;culture setting&lt;/a&gt; is &lt;em&gt;en-US&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-0-custom-specifier&quot;&gt;The “0” custom specifier&lt;/h2&gt;

&lt;h3 id=&quot;for-the-integer-part&quot;&gt;For the integer part,&lt;/h3&gt;

&lt;p&gt;If number of digits of the given number are greater than number of “0” placeholders what presented is displayed.&lt;/p&gt;

&lt;p&gt;If being less, leading $0$ digits are appended.&lt;/p&gt;

&lt;h3 id=&quot;for-the-decimal-part&quot;&gt;For the decimal part,&lt;/h3&gt;

&lt;p&gt;If number of digits of the given number are greater than number of “0” placeholders, the decimal part is rounded as much as total digits of the “0” placeholders.&lt;/p&gt;

&lt;p&gt;If being less, trailing zero(s) are appended.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Number is rounded if includes more decimal places then the custom specifier.
Console.WriteLine($&quot;{786.128:000.00}&quot;); // 786.13
Console.WriteLine($&quot;{786.1:0000.000}&quot;); // 0786.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-octothorp-custom-specifier&quot;&gt;The “#”(octothorp) custom specifier&lt;/h2&gt;

&lt;h3 id=&quot;for-the-integer-part-1&quot;&gt;For the integer part,&lt;/h3&gt;

&lt;p&gt;If number of digits of the given number are &lt;em&gt;greater than&lt;/em&gt; number of “#” placeholders, what presented is displayed.&lt;/p&gt;

&lt;p&gt;If being less, what presented is displayed. That is to say, there is no any leading digits.&lt;/p&gt;

&lt;h3 id=&quot;for-the-decimal-part-1&quot;&gt;For the decimal part,&lt;/h3&gt;

&lt;p&gt;If number of digits of the given number are &lt;em&gt;greater than&lt;/em&gt; number of “#” placeholders, the decimal part is rounded as much as total digits of the “#” placeholders. (same as the case of “0” placeholder)&lt;/p&gt;

&lt;p&gt;If being less, nothing is appended, that is to say what presented is displayed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Console.WriteLine($&quot;{2.7:0##.#}&quot;); // 002.7
// Number is rounded if includes more decimal places then the custom specifier.
Console.WriteLine($&quot;{786.36:0######.#}&quot;); // 0000786.4 **
Console.WriteLine($&quot;{786.348:######0.##}&quot;); // 786.35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; Rounding logic in the placeholder usage is done by the following rule.
If a digit following immediately the digit being rounded is greater or equal to 5, the digit is increased by 1.
If being less, it preserves its value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; “#” placeholder doesn’t yield results to insignificant digits in the result string unlike “0” placeholder.&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// the four zeros are insignificant
int value = 0000529;
// the trailing zeros(6 pieces) are insignificant, but leading two.
double value = 2.00324000000 
// the whole number is insignificant
double value = 0.0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s glance at some examples related to the notes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double value = 25.710;
// both following yields same result, 26.
// Remember Note 1 saying immediate following digit's value makes a basis for rounding.
// left 5's following digit is 7(at the right-side).
Console.WriteLine(&quot;{0:#.}&quot;, value);
Console.WriteLine(&quot;{0:0.}&quot;, value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double value = 0.01;
double value2 = 0.07;

// same as {0:#}
Console.WriteLine(&quot;{0:#.}&quot;, value); // empty print due to integer part's insignificance
// same as {0:0}
Console.WriteLine(&quot;{0:0.}&quot;, value);

// .1 is printed due to integer part's insignificance and decimal part's rounding
Console.WriteLine(&quot;{0:#.#}&quot;, value2);
Console.WriteLine(&quot;{0:0.0}&quot;, value2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-comma-specifier&quot;&gt;The comma(,) specifier&lt;/h2&gt;

&lt;p&gt;It used both to separate the number into thousand places and divide by 1000.
I don’t like some explanations of Microsoft Documents, however, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings?redirectedfrom=MSDN#the--custom-specifier-2&quot;&gt;the bullet explanations&lt;/a&gt; are not bad.&lt;/p&gt;

&lt;p&gt;Read the bullets more than twice to comprehend the following example.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;double value = 911_271_222_876_919.12345;
// double size is exceeded, so 911271222876919.1 is the output.
Console.WriteLine(value);
// so, the acutal number is 911_271_222_876_919.1
// result is 911,271.2229
Console.WriteLine(&quot;{0:#,0,,,.0000}&quot;, value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s my two cents that first examine the integer part then the decimal part.&lt;/p&gt;

&lt;p&gt;The number is divided by $1000^3$ since there are 3 commas at first as well as one more comma among two placeholders to get seperated output. It yields 911,271. But, we wish to get 4 more digits as a decimal part.
In this case, the following digits of 911,271 make up the decimal part with rounding. So, the digits are 2, 2, 2, and 8. But since the actual numbers’ digits are greater than the four placeholders, “0000”, the decimal part is rounded to 2229.&lt;/p&gt;

&lt;p&gt;I’m not going on explaining the other specifiers i.e. &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings?redirectedfrom=MSDN#the--custom-specifier-3&quot;&gt;%&lt;/a&gt; from now on since once you grasp the explained logic, the others are as easy as falling off a log.&lt;/p&gt;

&lt;p&gt;Additional examples can be found on &lt;a href=&quot;https://web.archive.org/web/20191123153500/https://www.dotnetperls.com/format&quot;&gt;this link&lt;/a&gt; and &lt;a href=&quot;https://web.archive.org/web/20191123153526/https://www.codebuns.com/csharp/numeric-formats/&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find amiss point, please let me know  but to err  is  human,  you  know.  To  forgive  is  divine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Soner The Improver&lt;/em&gt;&lt;/p&gt;</content><author><name>Soner Akar</name></author><summary type="html">The Custom Specifiers</summary></entry><entry><title type="html">Difference Between Equality Operator Equals Method</title><link href="http://localhost:4000/java/Difference-between-equality-operator-equals-method.html" rel="alternate" type="text/html" title="Difference Between Equality Operator Equals Method" /><published>2018-01-22T21:34:34+03:00</published><updated>2018-01-22T21:34:34+03:00</updated><id>http://localhost:4000/java/Difference-between-equality-operator-equals-method</id><content type="html" xml:base="http://localhost:4000/java/Difference-between-equality-operator-equals-method.html">&lt;p&gt;You have used String class of Java hundred times, however, you feel yourself to know adequately about it. But, early to decide!&lt;/p&gt;

&lt;p&gt;As you know, if not now time to learn, equality checking operator &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; is used to compare references, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;equals()&lt;/code&gt; method is used to compare whether or not strings are filled up by the same contents.&lt;/p&gt;

&lt;p&gt;Let’s see your level, what is the output of the following?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I seem to hear that it will result in totally false! Cray-cray adorbs of course true! Let’s examine why. In the case of variables &lt;code class=&quot;highlighter-rouge&quot;&gt;str1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;str2&lt;/code&gt;, the objects are created and stored in a &lt;strong&gt;pool of String objects&lt;/strong&gt;. Before creating a new object in the pool, Java searches for an object with similar contents. When the following line of code executes, no String object with the value
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Soner&quot;&lt;/code&gt; is found in the pool of String objects:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a result, Java creates a String object with the value &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Soner&quot;&lt;/code&gt; in the pool of String
objects referred to by the variable str1.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Creates a new String object with value
    Morning in the String constant pool */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These values are reused from the String constant pool if a matching value is found. If
a matching value isn’t found, the JVM creates a String object with the specified value
and places it in the String constant pool:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morning1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morning1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compare the preceding example with the following example, which creates a String
object using the operator new and (only) double quotes and then compares their
references:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* This String object is not placed
	in the String constant pool.
	So it will give false output */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morning2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Morning&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morning2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;
&lt;span style=&quot;color:blue&quot;&gt;Note:&lt;/span&gt; The terms &lt;b&gt;String constant pool&lt;/b&gt; and &lt;b&gt;String pool&lt;/b&gt; are used interchangeably and refer to the same pool of String objects.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Whether test your comprehension, take a glance at the following code to count total number of String objects being created.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OMGString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soner2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;akar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;akar&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;akar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Soner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt;
  &lt;summary&gt;
➡ How many String objects being created are there?
&lt;i&gt;Click here to see the answer.&lt;/i&gt; ↴
 &lt;/summary&gt;

* The code at ① creates a new String object with the value `&quot;Soner&quot;`. This object
is not placed in the String constant pool.
* The code at ② creates a new String object with the value `&quot;Soner&quot;` and places
it in the String constant pool.
* The code at ③ doesn’t need to create any new String object. It reuses the
String object with the value `&quot;Soner&quot;` that already existed in the String con-
stant pool.
* The code at ④ creates a new String object with the value `&quot;akar&quot;` and places
it in the String constant pool.
* The code at ⑤ reuses the String value `&quot;akar&quot;` from the String constant
pool. It creates a String object with the value &quot;soner&quot; in the String con-
stant pool (note the difference in the case of letters—Java is case-sensitive and
`&quot;Soner&quot;` is not the same as `&quot;soner&quot;` ).
* The code at ⑥ creates a new String object with the value `&quot;Soner&quot;`.


&lt;blockquote&gt;&lt;p&gt;
&lt;span style=&quot;color:blue&quot;&gt;Answer:&lt;/span&gt;
&lt;i&gt;The previous code creates a total of five String objects.&lt;/i&gt;
&lt;/p&gt;&lt;/blockquote&gt;

&lt;/details&gt;

&lt;p&gt;That’s all. I hope that it wouldn’t be waste of time.&lt;/p&gt;</content><author><name>Soner Akar</name></author><summary type="html">You have used String class of Java hundred times, however, you feel yourself to know adequately about it. But, early to decide! As you know, if not now time to learn, equality checking operator == is used to compare references, whereas equals() method is used to compare whether or not strings are filled up by the same contents. Let’s see your level, what is the output of the following? String str1 = &quot;Soner&quot;; String str2 = &quot;Soner&quot;; System.out.println(str1 == str2); I seem to hear that it will result in totally false! Cray-cray adorbs of course true! Let’s examine why. In the case of variables str1 and str2, the objects are created and stored in a pool of String objects. Before creating a new object in the pool, Java searches for an object with similar contents. When the following line of code executes, no String object with the value &quot;Soner&quot; is found in the pool of String objects: String str1 = &quot;Soner&quot;; As a result, Java creates a String object with the value &quot;Soner&quot; in the pool of String objects referred to by the variable str1. /* Creates a new String object with value Morning in the String constant pool */ System.out.println(&quot;Morning&quot;); These values are reused from the String constant pool if a matching value is found. If a matching value isn’t found, the JVM creates a String object with the specified value and places it in the String constant pool: String morning1 = &quot;Morning&quot;; System.out.println(&quot;Morning&quot; == morning1); Compare the preceding example with the following example, which creates a String object using the operator new and (only) double quotes and then compares their references: /* This String object is not placed in the String constant pool. So it will give false output */ String morning2 = new String(&quot;Morning&quot;); System.out.println(&quot;Morning&quot; == morning2); Note: The terms String constant pool and String pool are used interchangeably and refer to the same pool of String objects. Whether test your comprehension, take a glance at the following code to count total number of String objects being created. class OMGString { public static void main(String... args) { String soner = new String(&quot;Soner&quot;); // 1 String soner2 = &quot;Soner&quot;; // 2 System.out.println(&quot;Soner&quot;); // 3 System.out.println(&quot;akar&quot;); // 4 System.out.println(&quot;akar&quot; == &quot;soner&quot;); // 5 String akar = new String(&quot;Soner&quot;); // 6 } } ➡ How many String objects being created are there? Click here to see the answer. ↴ * The code at ① creates a new String object with the value `&quot;Soner&quot;`. This object is not placed in the String constant pool. * The code at ② creates a new String object with the value `&quot;Soner&quot;` and places it in the String constant pool. * The code at ③ doesn’t need to create any new String object. It reuses the String object with the value `&quot;Soner&quot;` that already existed in the String con- stant pool. * The code at ④ creates a new String object with the value `&quot;akar&quot;` and places it in the String constant pool. * The code at ⑤ reuses the String value `&quot;akar&quot;` from the String constant pool. It creates a String object with the value &quot;soner&quot; in the String con- stant pool (note the difference in the case of letters—Java is case-sensitive and `&quot;Soner&quot;` is not the same as `&quot;soner&quot;` ). * The code at ⑥ creates a new String object with the value `&quot;Soner&quot;`. Answer: The previous code creates a total of five String objects. That’s all. I hope that it wouldn’t be waste of time.</summary></entry></feed>